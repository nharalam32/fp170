python file:
from datetime import datetime, timezone
from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://chris:sirhc@172.16.181.82/fp170'
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    first_name = db.Column(db.String(50), nullable=False)
    last_name = db.Column(db.String(50), nullable=False)
    ssn = db.Column(db.String(9), nullable=False)
    address = db.Column(db.String(100), nullable=False)
    phone_number = db.Column(db.String(15), nullable=False)
    password = db.Column(db.String(100), nullable=False)
    balance = db.Column(db.Float, default=0)
    approved = db.Column(db.Boolean, default=False)

class Admin(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)

class Transaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    sender_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    recipient_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    amount = db.Column(db.Float, nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False, default=datetime.now(timezone.utc))

class Notification(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    message = db.Column(db.String(255), nullable=False)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)

    def __repr__(self):
        return f"Notification('{self.message}', '{self.created_at}')"

@app.route('/')
def index():
    return render_template('base.html')

@app.route('/admin')
def admin():
    if 'admin_id' not in session:
        return redirect(url_for('admin_login'))
    if session['admin_id'] != 1:  # Assuming admin ID is 1
        return redirect(url_for('admin_login'))
    users = User.query.filter_by(approved=False).all()
    return render_template('admin.html', users=users)

@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        # Check if the admin user exists in the database
        admin = Admin.query.filter_by(username=username, password=password).first()
        
        print("Form Username:", username)  # Debugging
        print("Database Admin Username:", admin.username if admin else None)  # Debugging
        
        if admin:
            # Set the admin_id in the session upon successful login
            session['admin_id'] = admin.id
            print("Admin login successful")  # Debugging
            return redirect(url_for('admin'))
        else:
            flash('Invalid username or password', 'error')
    
    return render_template('admin_login.html')

# Route for user registration
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        # Extract registration form data
        username = request.form['username']
        first_name = request.form['first_name']
        last_name = request.form['last_name']
        ssn = request.form['ssn']
        address = request.form['address']
        phone_number = request.form['phone_number']
        password = request.form['password']
        
        # Create a new user with default approved status
        new_user = User(
            username=username,
            first_name=first_name,
            last_name=last_name,
            ssn=ssn,
            address=address,
            phone_number=phone_number,
            password=password,
            approved=True  # Set default approved status to True
        )
        
        db.session.add(new_user)
        db.session.commit()
        
        # Set the user_id in the session after registration
        session['user_id'] = new_user.id
        
        return redirect(url_for('dashboard'))
    
    # Render the registration form for GET requests
    return render_template('register.html')

# Route for admin to accept users
@app.route('/admin/accept_user/<int:user_id>', methods=['POST'])
def accept_user(user_id):
    if 'admin_id' not in session or session['admin_id'] != 1:
        return redirect(url_for('admin_login'))

    user = User.query.get(user_id)
    if user:
        user.approved = True
        db.session.commit()
        flash(f'User {user.username} has been accepted.', 'success')
    else:
        flash('User not found.', 'error')
    
    return redirect(url_for('admin'))

# Route for admin notifications
@app.route('/admin/notifications')
def admin_notifications():
    if 'admin_id' not in session or session['admin_id'] != 1:
        return redirect(url_for('admin_login'))

    notifications = Notification.query.all()  # Assuming you have a Notification model
    return render_template('admin_notifications.html', notifications=notifications)

# Route for user login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        # Get user credentials from the form
        username = request.form['username']
        password = request.form['password']
        
        # Check if the user exists in the database
        user = User.query.filter_by(username=username).first()
        
        if user:
            # If user exists, check if the account is approved
            if user.approved:
                # If approved, authenticate the password
                if user.password == password:
                    # If authenticated, store user ID in session
                    session['user_id'] = user.id
                    return redirect(url_for('dashboard'))
                else:
                    flash('Invalid username or password', 'error')
            else:
                flash('Your account is still pending approval by the admin', 'warning')
        else:
            # If user does not exist, create a new user
            new_user = User(username=username, password=password)
            db.session.add(new_user)
            db.session.commit()
            session['user_id'] = new_user.id
            flash('Account created successfully. Your account is pending approval by the admin', 'success')
            return redirect(url_for('dashboard'))
    
    return render_template('login.html')

# Route for user dashboard
@app.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    user = User.query.get(session['user_id'])
    return render_template('dashboard.html', user=user)

# Route to add money to the user account
@app.route('/add_money', methods=['POST'])
def add_money():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    # Process payment information and update user balance
    return redirect(url_for('dashboard'))

# Route to send money from user account
@app.route('/send_money', methods=['POST'])
def send_money():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    # Process transaction information and update sender and recipient balances
    return redirect(url_for('dashboard'))

if __name__ == '__main__':
    app.run(debug=True)

admin_login.html:
{% extends "base.html" %}
{% block heading %}Admin Login{% endblock %}
{% block content %}
    <h1>Admin Login</h1>
    <form action="/admin/login" method="POST">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>
        <button type="submit">Login</button>
        {% if error %}
        <p>{{ error }}</p>
        {% endif %}
    </form>
{% endblock %}

admin.html:
{% extends "base.html" %}
{% block heading %}Admin{% endblock %}
{% block content %}
    <h1>Admin Dashboard</h1>
    <table>
        <thead>
            <tr>
                <th>Username</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>SSN</th>
                <th>Address</th>
                <th>Phone Number</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {% for user in users %}
            <tr>
                <td>{{ user.username }}</td>
                <td>{{ user.first_name }}</td>
                <td>{{ user.last_name }}</td>
                <td>{{ user.ssn }}</td>
                <td>{{ user.address }}</td>
                <td>{{ user.phone_number }}</td>
                <td>
                    <form action="/approve/{{ user.id }}" method="POST">
                        <button type="submit">Approve</button>
                    </form>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
{% endblock %}

login.html:
{% extends "base.html" %}
{% block heading %}Login{% endblock %}
{% block content %}
    <form action="/login" method="POST">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>
        <button type="submit">Register</button>
    </form>
{% endblock %}

register:
{% extends "base.html" %}
{% block heading %}Create Account{% endblock %}
{% block content %}
    <h1>User Registration</h1>
    <form action="/register" method="POST">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" name="first_name" required><br><br>
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" name="last_name" required><br><br>
        <label for="ssn">SSN:</label>
        <input type="text" id="ssn" name="ssn" required><br><br>
        <label for="address">Address:</label>
        <input type="text" id="address" name="address" required><br><br>
        <label for="phone_number">Phone Number:</label>
        <input type="text" id="phone_number" name="phone_number" required><br><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>
        <button type="submit">Register</button>
    </form>
{% endblock %}